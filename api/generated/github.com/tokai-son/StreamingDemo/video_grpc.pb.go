// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: video.proto

package StreamingDemo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoStreamService_StreamVideo_FullMethodName = "/streaming.VideoStreamService/StreamVideo"
)

// VideoStreamServiceClient is the client API for VideoStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoStreamServiceClient interface {
	StreamVideo(ctx context.Context, opts ...grpc.CallOption) (VideoStreamService_StreamVideoClient, error)
}

type videoStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoStreamServiceClient(cc grpc.ClientConnInterface) VideoStreamServiceClient {
	return &videoStreamServiceClient{cc}
}

func (c *videoStreamServiceClient) StreamVideo(ctx context.Context, opts ...grpc.CallOption) (VideoStreamService_StreamVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoStreamService_ServiceDesc.Streams[0], VideoStreamService_StreamVideo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &videoStreamServiceStreamVideoClient{stream}
	return x, nil
}

type VideoStreamService_StreamVideoClient interface {
	Send(*StreamRequest) error
	Recv() (*StreamResponse, error)
	grpc.ClientStream
}

type videoStreamServiceStreamVideoClient struct {
	grpc.ClientStream
}

func (x *videoStreamServiceStreamVideoClient) Send(m *StreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoStreamServiceStreamVideoClient) Recv() (*StreamResponse, error) {
	m := new(StreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoStreamServiceServer is the server API for VideoStreamService service.
// All implementations must embed UnimplementedVideoStreamServiceServer
// for forward compatibility
type VideoStreamServiceServer interface {
	StreamVideo(VideoStreamService_StreamVideoServer) error
	mustEmbedUnimplementedVideoStreamServiceServer()
}

// UnimplementedVideoStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoStreamServiceServer struct {
}

func (UnimplementedVideoStreamServiceServer) StreamVideo(VideoStreamService_StreamVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamVideo not implemented")
}
func (UnimplementedVideoStreamServiceServer) mustEmbedUnimplementedVideoStreamServiceServer() {}

// UnsafeVideoStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoStreamServiceServer will
// result in compilation errors.
type UnsafeVideoStreamServiceServer interface {
	mustEmbedUnimplementedVideoStreamServiceServer()
}

func RegisterVideoStreamServiceServer(s grpc.ServiceRegistrar, srv VideoStreamServiceServer) {
	s.RegisterService(&VideoStreamService_ServiceDesc, srv)
}

func _VideoStreamService_StreamVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoStreamServiceServer).StreamVideo(&videoStreamServiceStreamVideoServer{stream})
}

type VideoStreamService_StreamVideoServer interface {
	Send(*StreamResponse) error
	Recv() (*StreamRequest, error)
	grpc.ServerStream
}

type videoStreamServiceStreamVideoServer struct {
	grpc.ServerStream
}

func (x *videoStreamServiceStreamVideoServer) Send(m *StreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoStreamServiceStreamVideoServer) Recv() (*StreamRequest, error) {
	m := new(StreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoStreamService_ServiceDesc is the grpc.ServiceDesc for VideoStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streaming.VideoStreamService",
	HandlerType: (*VideoStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamVideo",
			Handler:       _VideoStreamService_StreamVideo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "video.proto",
}
